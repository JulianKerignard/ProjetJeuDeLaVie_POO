[{"state":{"code":"classDiagram\n    class Cell {\n        -CellState currentState\n        -CellState nextState\n        -bool isObstacle\n        +Cell(CellState initialState = CellState::DEAD)\n        +void updateState()\n        +CellState getCurrentState() const\n        +void setNextState(CellState state)\n        +void setObstacle(bool obstacle)\n        +bool isObstacleCell() const\n    }\n\n    class Grid {\n        -std::vector<std::vector<Cell>> cells\n        -int width\n        -int height\n        -bool isToroidal\n        +Grid(int width, int height)\n        +void updateCells()\n        +Cell& getCellAt(int x, int y)\n        +const Cell& getCellAt(int x, int y) const\n        +void setCellAt(int x, int y, CellState state)\n        +std::vector<std::pair<int, int>> getNeighbors(int x, int y) const\n        +void setToroidal(bool enabled)\n        +void addObstacle(int x, int y)\n        +void addPattern(Pattern pattern, int x, int y)\n        +int getWidth() const\n        +int getHeight() const\n        +bool getToroidal() const\n    }\n\n    class FileHandler {\n        +static const int DEFAULT_CELLS_WIDTH\n        +static const int DEFAULT_CELLS_HEIGHT\n        +static FileFormat getFileFormat(const std::string& path)\n        +static Grid loadGridFromFile(const std::string& path)\n        +static void loadGridFromFile(const std::string& path, Grid& grid)\n        +static void saveGridToFile(const Grid& grid, const std::string& path)\n        +static bool validateTxtFormat(const std::string& content)\n        +static bool validateCellsFormat(const std::string& content)\n    }\n\n    class GraphicalDisplay {\n        -sf::RenderWindow window\n        -sf::RenderTexture buffer\n        -float cellSize\n        -Grid* grid\n        -bool isDrawing\n        -float iterationSpeed\n        -bool paused\n        -int currentIteration\n        -int maxIterations\n        -sf::Font font\n        -sf::Text helpText\n        -sf::Text fpsText\n        -sf::RectangleShape cellShape\n        -sf::Clock fpsClock\n        -float lastFPS\n        +GraphicalDisplay(int windowWidth = 1920, int windowHeight = 1080)\n        +void initialize()\n        +void update(const Grid& grid)\n        +void close()\n        +bool isWindowOpen() const\n        +void setGrid(Grid* g)\n        +void setIterationDelay(float delay)\n        +float getIterationSpeed() const\n        +bool isPaused() const\n        +void togglePause()\n        +void setIterationCount(int count)\n        +void setMaxIterations(int max)\n        +int getIterationCount() const\n    }\n\n    class DisplayManager {\n        +virtual ~DisplayManager() = default\n        +virtual void initialize() = 0\n        +virtual void update(const Grid& grid) = 0\n        +virtual void close() = 0\n    }\n\n    class ConsoleDisplay {\n        -int iterationCounter\n        -std::ofstream outputFile\n        +ConsoleDisplay()\n        +void initialize() override\n        +void update(const Grid& grid) override\n        +void close() override\n    }\n\n    class RLEReader {\n        +static Grid loadFromFile(const std::string& filename)\n        +static void loadFromFile(const std::string& filename, Grid& grid)\n    }\n\n    class Game {\n        -Grid grid\n        -std::unique_ptr<DisplayManager> displayManager\n        -int iterationCount\n        -int maxIterations\n        -bool isRunning\n        -float iterationDelay\n        -float lastUpdateSpeed\n        +Game(const std::string& filePath, DisplayMode mode)\n        +Game(const std::string& filePath, DisplayMode mode, FileType fileType)\n        +Game(const std::string& filePath, DisplayMode mode, FileType fileType, int width, int height)\n        +void run()\n        +void pause()\n        +void resume()\n        +void setIterationDelay(float ms)\n        +void updateIterationDelay(float delta)\n        +void setMaxIterations(int max)\n        +int getCurrentIteration() const\n        +float getIterationDelay() const\n        +bool isGameRunning() const\n        +static void userInterface()\n        +static void createNewConfigFile(int width, int height)\n    }\n\n    class ThreadPool {\n        +ThreadPool(int threads)\n        +void enqueue(std::function<void()> task)\n        +void shutdown()\n    }\n\n    class CellState {\n        <<enumeration>>\n        DEAD\n        ALIVE\n        OBSTACLE\n    }\n\n    class Pattern {\n        <<enumeration>>\n        GLIDER\n        BLINKER\n        BLOCK\n        BEACON\n    }\n\n    class FileFormat {\n        <<enumeration>>\n        TXT\n        CELLS\n        UNKNOWN\n    }\n\n    class DisplayMode {\n        <<enumeration>>\n        CONSOLE\n        GRAPHICAL\n    }\n\n    class FileType {\n        <<enumeration>>\n        STANDARD\n        RLE\n    }\n\n    Grid *-- Cell : composition\n    FileHandler o-- Grid : aggregation\n    GraphicalDisplay --> Grid : association\n    DisplayManager <|-- ConsoleDisplay : inheritance\n    DisplayManager <|-- GraphicalDisplay : inheritance\n    ConsoleDisplay --> Grid : association\n    RLEReader --> Grid : association\n    Game *-- Grid : composition\n    Game o-- DisplayManager : aggregation\n    ThreadPool ..> Grid : association\n    Cell --> CellState : association\n    Grid --> Pattern : association\n    FileHandler --> FileFormat : association\n    Game --> DisplayMode : association\n    Game --> FileType : association","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":true,"editorMode":"code","pan":{"x":-492.6083052154373,"y":-817.1715309692011},"zoom":2.7799598371704235},"time":1733476796711,"type":"auto","id":"10dc1026-1c21-44cd-b29b-5eadd8b54c18","name":"drab-account"},{"state":{"code":"classDiagram\n    class Cell {\n        -CellState currentState\n        -CellState nextState\n        -bool isObstacle\n        +Cell(CellState initialState = CellState::DEAD)\n        +void updateState()\n        +CellState getCurrentState() const\n        +void setNextState(CellState state)\n        +void setObstacle(bool obstacle)\n        +bool isObstacleCell() const\n    }\n\n    class Grid {\n        -std::vector<std::vector<Cell>> cells\n        -int width\n        -int height\n        -bool isToroidal\n        +Grid(int width, int height)\n        +void updateCells()\n        +Cell& getCellAt(int x, int y)\n        +const Cell& getCellAt(int x, int y) const\n        +void setCellAt(int x, int y, CellState state)\n        +std::vector<std::pair<int, int>> getNeighbors(int x, int y) const\n        +void setToroidal(bool enabled)\n        +void addObstacle(int x, int y)\n        +void addPattern(Pattern pattern, int x, int y)\n        +int getWidth() const\n        +int getHeight() const\n        +bool getToroidal() const\n    }\n\n    class FileHandler {\n        +static const int DEFAULT_CELLS_WIDTH\n        +static const int DEFAULT_CELLS_HEIGHT\n        +static FileFormat getFileFormat(const std::string& path)\n        +static Grid loadGridFromFile(const std::string& path)\n        +static void loadGridFromFile(const std::string& path, Grid& grid)\n        +static void saveGridToFile(const Grid& grid, const std::string& path)\n        +static bool validateTxtFormat(const std::string& content)\n        +static bool validateCellsFormat(const std::string& content)\n    }\n\n    class GraphicalDisplay {\n        -sf::RenderWindow window\n        -sf::RenderTexture buffer\n        -float cellSize\n        -Grid* grid\n        -bool isDrawing\n        -float iterationSpeed\n        -bool paused\n        -int currentIteration\n        -int maxIterations\n        -sf::Font font\n        -sf::Text helpText\n        -sf::Text fpsText\n        -sf::RectangleShape cellShape\n        -sf::Clock fpsClock\n        -float lastFPS\n        +GraphicalDisplay(int windowWidth = 1920, int windowHeight = 1080)\n        +void initialize()\n        +void update(const Grid& grid)\n        +void close()\n        +bool isWindowOpen() const\n        +void setGrid(Grid* g)\n        +void setIterationDelay(float delay)\n        +float getIterationSpeed() const\n        +bool isPaused() const\n        +void togglePause()\n        +void setIterationCount(int count)\n        +void setMaxIterations(int max)\n        +int getIterationCount() const\n    }\n\n    class DisplayManager {\n        +virtual ~DisplayManager() = default\n        +virtual void initialize() = 0\n        +virtual void update(const Grid& grid) = 0\n        +virtual void close() = 0\n    }\n\n    class ConsoleDisplay {\n        -int iterationCounter\n        -std::ofstream outputFile\n        +ConsoleDisplay()\n        +void initialize() override\n        +void update(const Grid& grid) override\n        +void close() override\n    }\n\n    class RLEReader {\n        +static Grid loadFromFile(const std::string& filename)\n        +static void loadFromFile(const std::string& filename, Grid& grid)\n    }\n\n    class Game {\n        -Grid grid\n        -std::unique_ptr<DisplayManager> displayManager\n        -int iterationCount\n        -int maxIterations\n        -bool isRunning\n        -float iterationDelay\n        -float lastUpdateSpeed\n        +Game(const std::string& filePath, DisplayMode mode)\n        +Game(const std::string& filePath, DisplayMode mode, FileType fileType)\n        +Game(const std::string& filePath, DisplayMode mode, FileType fileType, int width, int height)\n        +void run()\n        +void pause()\n        +void resume()\n        +void setIterationDelay(float ms)\n        +void updateIterationDelay(float delta)\n        +void setMaxIterations(int max)\n        +int getCurrentIteration() const\n        +float getIterationDelay() const\n        +bool isGameRunning() const\n        +static void userInterface()\n        +static void createNewConfigFile(int width, int height)\n    }\n\n    class ThreadPool {\n        +ThreadPool(int threads)\n        +void enqueue(std::function<void()> task)\n        +void shutdown()\n    }\n\n    class CellState {\n        <<enumeration>>\n        DEAD\n        ALIVE\n        OBSTACLE\n    }\n\n    class Pattern {\n        <<enumeration>>\n        GLIDER\n        BLINKER\n        BLOCK\n        BEACON\n    }\n\n    class FileFormat {\n        <<enumeration>>\n        TXT\n        CELLS\n        UNKNOWN\n    }\n\n    class DisplayMode {\n        <<enumeration>>\n        CONSOLE\n        GRAPHICAL\n    }\n\n    class FileType {\n        <<enumeration>>\n        STANDARD\n        RLE\n    }\n\n    Grid *-- Cell : composition\n    FileHandler o-- Grid : aggregation\n    GraphicalDisplay --> Grid : association\n    DisplayManager <|-- ConsoleDisplay : inheritance\n    DisplayManager <|-- GraphicalDisplay : inheritance\n    ConsoleDisplay --> Grid : association\n    RLEReader --> Grid : association\n    Game *-- Grid : composition\n    Game o-- DisplayManager : aggregation\n    ThreadPool ..> Grid : association\n    Cell --> CellState : association\n    Grid --> Pattern : association\n    FileHandler --> FileFormat : association\n    Game --> DisplayMode : association\n    Game --> FileType : association","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":true,"editorMode":"code","pan":{"x":-555.6082938517975,"y":-874.1714984243989},"zoom":2.7799598371704235},"time":1733476735723,"type":"auto","id":"3bce56ce-33ae-4a9a-a7b9-9050dd84789f","name":"big-airplane"},{"state":{"code":"classDiagram\n    class Grid {\n        -int width\n        -int height\n        -bool isToroidal\n        +Grid(int width, int height)\n        +void updateCells()\n        +Cell& getCellAt(int x, int y)\n        +void setCellAt(int x, int y, CellState state)\n        +std::vector<std::pair<int, int>> getNeighbors(int x, int y) const\n        +void setToroidal(bool enabled)\n        +int getWidth() const\n        +int getHeight() const\n        +bool getToroidal() const\n    }\n\n    class Cell {\n        -CellState currentState\n        -CellState nextState\n        -bool isObstacle\n        +Cell(CellState initialState)\n        +void updateState()\n        +CellState getCurrentState() const\n        +void setNextState(CellState state)\n        +void setObstacle(bool obstacle)\n        +bool isObstacleCell() const\n    }\n\n    class FileHandler {\n        +static const int DEFAULT_CELLS_WIDTH\n        +static const int DEFAULT_CELLS_HEIGHT\n        +static FileFormat getFileFormat(const std::string& path)\n        +static Grid loadGridFromFile(const std::string& path)\n        +static void saveGridToFile(const Grid& grid, const std::string& path)\n        +static bool validateTxtFormat(const std::string& content)\n        +static bool validateCellsFormat(const std::string& content)\n    }\n\n    class GraphicalDisplay {\n        -sf::RenderWindow window\n        -sf::RenderTexture buffer\n        -float cellSize\n        -Grid* grid\n        -bool isDrawing\n        -float iterationSpeed\n        -bool paused\n        -int currentIteration\n        -int maxIterations\n        -sf::Font font\n        -sf::Text helpText\n        -sf::Text fpsText\n        -sf::RectangleShape cellShape\n        -sf::Clock fpsClock\n        -float lastFPS\n        +GraphicalDisplay(int windowWidth, int windowHeight)\n        +void initialize()\n        +void update(const Grid& grid)\n        +void close()\n        +bool isWindowOpen() const\n        +void setGrid(Grid* g)\n        +void setIterationDelay(float delay)\n        +float getIterationSpeed() const\n        +bool isPaused() const\n        +void togglePause()\n        +void setIterationCount(int count)\n        +void setMaxIterations(int max)\n        +int getIterationCount() const\n    }\n\n    class Game {\n        -Grid grid\n        -std::unique_ptr<DisplayManager> displayManager\n        -int iterationCount\n        -int maxIterations\n        -bool isRunning\n        -float iterationDelay\n        +Game(const std::string& filePath, DisplayMode mode)\n        +Game(const std::string& filePath, DisplayMode mode, FileType fileType)\n        +Game(const std::string& filePath, DisplayMode mode, FileType fileType, int width, int height)\n        +void run()\n        +void pause()\n        +void resume()\n        +void setIterationDelay(float ms)\n        +void updateIterationDelay(float delta)\n        +void setMaxIterations(int max)\n        +int getCurrentIteration() const\n        +float getIterationDelay() const\n        +bool isGameRunning() const\n        +static void userInterface()\n        +static void createNewConfigFile(int width, int height)\n    }\n\n    class ConsoleDisplay {\n        -int iterationCounter\n        -std::ofstream outputFile\n        +ConsoleDisplay()\n        +void initialize()\n        +void update(const Grid& grid)\n        +void close()\n    }\n\n    class ThreadPool {\n        +ThreadPool(size_t threads)\n        +~ThreadPool()\n        +void shutdown()\n        +void enqueue(std::function<void()> task)\n    }\n\n    class RLEReader {\n        +static Grid loadFromFile(const std::string& filename)\n        +static void loadFromFile(const std::string& filename, Grid& grid)\n    }\n\n    Grid --> Cell\n    FileHandler --> Grid\n    GraphicalDisplay --> Grid\n    Game --> Grid\n    Game --> DisplayManager\n    ConsoleDisplay --> Grid\n    RLEReader --> Grid\n    ThreadPool ..> Grid","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false,"editorMode":"code","pan":{"x":56.28743541143345,"y":-57.84607983969477},"zoom":0.805255115032196},"time":1733476212288,"type":"auto","id":"95bbb381-927c-45d7-92da-6609cc01557f","name":"grumpy-notebook"},{"state":{"code":"classDiagram\n    class ThreadPool {\n        -std::vector<std::thread> workers\n        -std::queue<std::function<void()>> tasks\n        -std::mutex queue_mutex\n        -std::condition_variable condition\n        -bool stop\n        +ThreadPool(size_t threads)\n        +~ThreadPool()\n        +void shutdown()\n        +enqueue(F f, Args... args) : std::future<decltype(f(args...))>\n    }","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false,"editorMode":"code","pan":{"x":56.28743541143345,"y":-57.84607983969477},"zoom":0.805255115032196},"time":1733476092295,"type":"auto","id":"3cd42eb1-e926-4a24-aa4d-9c93d9886c52","name":"callous-autumn"},{"state":{"code":"classDiagram\n    class Grid {\n        -std::vector<std::vector<Cell>> cells\n        -int width\n        -int height\n        -bool isToroidal\n        +Grid(int width, int height)\n        +void updateCells()\n        +Cell& getCellAt(int x, int y)\n        +const Cell& getCellAt(int x, int y) const\n        +void setCellAt(int x, int y, CellState state)\n        +std::vector<std::pair<int, int>> getNeighbors(int x, int y) const\n        +void setToroidal(bool enabled)\n        +void addObstacle(int x, int y)\n        +void addPattern(Pattern pattern, int x, int y)\n        +int getWidth() const\n        +int getHeight() const\n        +bool getToroidal() const\n    }\n\n    class Cell {\n        -CellState currentState\n        -CellState nextState\n        -bool isObstacle\n        +Cell(CellState initialState)\n        +void updateState()\n        +CellState getCurrentState() const\n        +void setNextState(CellState state)\n        +void setObstacle(bool obstacle)\n        +bool isObstacleCell() const\n    }\n\n    class FileHandler {\n        +static const int DEFAULT_CELLS_WIDTH\n        +static const int DEFAULT_CELLS_HEIGHT\n        +static FileFormat getFileFormat(const std::string& path)\n        +static Grid loadGridFromFile(const std::string& path)\n        +static void loadGridFromFile(const std::string& path, Grid& grid)\n        +static void saveGridToFile(const Grid& grid, const std::string& path)\n        +static bool validateTxtFormat(const std::string& content)\n        +static bool validateCellsFormat(const std::string& content)\n    }\n\n    class GraphicalDisplay {\n        -sf::RenderWindow window\n        -sf::RenderTexture buffer\n        -float cellSize\n        -Grid* grid\n        -bool isDrawing\n        -float iterationSpeed\n        -bool paused\n        -int currentIteration\n        -int maxIterations\n        -sf::Font font\n        -sf::Text helpText\n        -sf::Text fpsText\n        -sf::RectangleShape cellShape\n        -sf::Clock fpsClock\n        -float lastFPS\n        -const sf::Color ALIVE_COLOR\n        -const sf::Color DEAD_COLOR\n        -const sf::Color GRID_COLOR\n        -const sf::Color OBSTACLE_COLOR\n        +GraphicalDisplay(int windowWidth, int windowHeight)\n        +void initialize()\n        +void update(const Grid& grid)\n        +void close()\n        +bool isWindowOpen() const\n        +void setGrid(Grid* g)\n        +void setIterationDelay(float delay)\n        +float getIterationSpeed() const\n        +bool isPaused() const\n        +void togglePause()\n        +void setIterationCount(int count)\n        +void setMaxIterations(int max)\n        +int getIterationCount() const\n    }\n\n    class Game {\n        -Grid grid\n        -std::unique_ptr<DisplayManager> displayManager\n        -int iterationCount\n        -int maxIterations\n        -bool isRunning\n        -float iterationDelay\n        -float lastUpdateSpeed\n        +Game(const std::string& filePath, DisplayMode mode)\n        +Game(const std::string& filePath, DisplayMode mode, FileType fileType)\n        +Game(const std::string& filePath, DisplayMode mode, FileType fileType, int width, int height)\n        +void run()\n        +void pause()\n        +void resume()\n        +void setIterationDelay(float ms)\n        +void updateIterationDelay(float delta)\n        +void setMaxIterations(int max)\n        +int getCurrentIteration() const\n        +float getIterationDelay() const\n        +bool isGameRunning() const\n        +static void userInterface()\n        +static void createNewConfigFile(int width, int height)\n    }\n\n    class ConsoleDisplay {\n        -int iterationCounter\n        -std::ofstream outputFile\n        +ConsoleDisplay()\n        +void initialize()\n        +void update(const Grid& grid)\n        +void close()\n    }\n\n    class ThreadPool {\n        -std::vector<std::thread> workers\n        -std::queue<std::function<void()>> tasks\n        -std::mutex queue_mutex\n        -std::condition_variable condition\n        -bool stop\n        +ThreadPool(size_t threads)\n        +~ThreadPool()\n        +void shutdown()\n        +template<class F, class... Args> auto enqueue(F&& f, Args&&... args) -> std::future<typename std::invoke_result<F, Args...>::type>\n    }\n\n    class RLEReader {\n        +static Grid loadFromFile(const std::string& filename)\n        +static void loadFromFile(const std::string& filename, Grid& grid)\n    }\n\n    Grid --> Cell\n    FileHandler --> Grid\n    GraphicalDisplay --> Grid\n    Game --> Grid\n    Game --> DisplayManager\n    ConsoleDisplay --> Grid\n    RLEReader --> Grid","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":true,"editorMode":"code","pan":{"x":56.28743541143345,"y":-57.84607983969477},"zoom":0.805255115032196},"time":1733472747494,"type":"auto","id":"23366042-397d-4109-a2bc-a19a9ba86bcf","name":"low-guitar"},{"state":{"code":"classDiagram\n    class Grid {\n        -std::vector<std::vector<Cell>> cells\n        -int width\n        -int height\n        -bool isToroidal\n        +Grid(int width, int height)\n        +void updateCells()\n        +Cell& getCellAt(int x, int y)\n        +const Cell& getCellAt(int x, int y) const\n        +void setCellAt(int x, int y, CellState state)\n        +void setToroidal(bool enabled)\n        +int getWidth() const\n        +int getHeight() const\n        +bool getToroidal() const\n    }\n\n    class Cell {\n        -CellState currentState\n        -CellState nextState\n        +Cell(CellState state)\n        +CellState getCurrentState() const\n        +void setNextState(CellState state)\n        +void updateState()\n        +bool isObstacleCell() const\n    }\n\n    class FileHandler {\n        +static const int DEFAULT_CELLS_WIDTH\n        +static const int DEFAULT_CELLS_HEIGHT\n        +static FileFormat getFileFormat(const std::string& path)\n        +static Grid loadGridFromFile(const std::string& path)\n        +static void loadGridFromFile(const std::string& path, Grid& grid)\n        +static void saveGridToFile(const Grid& grid, const std::string& path)\n        +static bool validateTxtFormat(const std::string& content)\n        +static bool validateCellsFormat(const std::string& content)\n    }\n\n    class GraphicalDisplay {\n        -sf::RenderWindow window\n        -sf::Font font\n        -sf::Text helpText\n        -sf::Text fpsText\n        -sf::Clock fpsClock\n        -float lastFPS\n        -float cellSize\n        -bool paused\n        -int currentIteration\n        -int maxIterations\n        -float iterationSpeed\n        -sf::RenderTexture buffer\n        -sf::Sprite backgroundSprite\n        -sf::Texture backgroundTexture\n        +GraphicalDisplay(int windowWidth, int windowHeight)\n        +void initialize()\n        +void update(const Grid& grid)\n        +void close()\n        +bool isWindowOpen() const\n        +void handleEvents()\n        +void updateFPS()\n        +void drawInterface(const Grid& grid)\n    }\n\n    Grid --> Cell\n    FileHandler --> Grid\n    GraphicalDisplay --> Grid","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":true,"editorMode":"code","pan":{"x":56.28743541143345,"y":-57.84607983969477},"zoom":0.805255115032196},"time":1733472687714,"type":"auto","id":"f24eb730-dd82-47c6-a7a8-ff751c0c7551","name":"helpful-morn"},{"state":{"code":"sequenceDiagram\n    participant Main as Programme Principal\n    participant Game as Jeu\n    participant Grid as Grille\n    participant FileHandler as Gestionnaire de Fichiers\n    participant DisplayManager as Gestionnaire d'Affichage\n    participant Cell as Cellule\n\n    Main->>FileHandler: Charger la configuration du fichier\n    FileHandler-->>Main: Retourne la configuration de la grille\n    Main->>Game: Créer le jeu avec la configuration\n    Main->>Game: Démarrer le jeu (run())\n\n    loop Tant que le jeu est en cours\n        Game->>Grid: updateCells()\n        Grid->>Cell: Pour chaque cellule: updateState()\n        \n        alt Mode Graphique\n            Game->>DisplayManager: update(grid)\n            DisplayManager->>DisplayManager: Dessiner la grille\n        else Mode Console\n            Game->>DisplayManager: update(grid)\n            DisplayManager->>DisplayManager: Afficher l'état de la grille\n        end\n\n        Game->>Game: Incrémenter le nombre d'itérations\n        \n        alt Nombre max d'itérations atteint\n            Game->>Game: Arrêter le jeu\n        end\n    end\n\n    Game->>DisplayManager: close()\n    DisplayManager-->>Game: Fermeture de l'affichage","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":true,"editorMode":"code","pan":{"x":56.28743541143345,"y":-57.84607983969477},"zoom":0.8052551009217611},"time":1733472627703,"type":"auto","id":"c521df3b-9235-49ab-a692-e73fb5b8c477","name":"repulsive-toddler"},{"state":{"code":"sequenceDiagram\n    participant Main as Programme Principal\n    participant Game as Jeu\n    participant Grid as Grille\n    participant FileHandler as Gestionnaire de Fichiers\n    participant DisplayManager as Gestionnaire d'Affichage\n    participant Cell as Cellule\n\n    Main->>FileHandler: Charger la configuration du fichier\n    FileHandler-->>Main: Retourne la configuration de la grille\n    Main->>Game: Créer le jeu avec la configuration\n    Main->>Game: Démarrer le jeu (run())\n\n    loop Tant que le jeu est en cours\n        Game->>Grid: updateCells()\n        Grid->>Cell: Pour chaque cellule: updateState()\n        \n        alt Mode Graphique\n            Game->>DisplayManager: update(grid)\n            DisplayManager->>DisplayManager: Dessiner la grille\n        else Mode Console\n            Game->>DisplayManager: update(grid)\n            DisplayManager->>DisplayManager: Afficher l'état de la grille\n        end\n\n        Game->>Game: Incrémenter le nombre d'itérations\n        \n        alt Nombre max d'itérations atteint\n            Game->>Game: Arrêter le jeu\n        end\n    end\n\n    Game->>DisplayManager: close()\n    DisplayManager-->>Game: Fermeture de l'affichage","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":true,"editorMode":"code","pan":{"x":246.4760032556103,"y":117.4194909140235},"zoom":0.5000000084784295},"time":1733472567505,"type":"auto","id":"d1be919b-c872-40d3-a935-3a7b8eef7317","name":"huge-plumber"},{"state":{"code":"sequenceDiagram\n    participant Main as Programme Principal\n    participant Game as Jeu\n    participant Grid as Grille\n    participant FileHandler as Gestionnaire de Fichiers\n    participant DisplayManager as Gestionnaire d'Affichage\n    participant Cell as Cellule\n\n    Main->>FileHandler: Charger la configuration du fichier\n    FileHandler-->>Main: Retourne la configuration de la grille\n    Main->>Game: Créer le jeu avec la configuration\n    Main->>Game: Démarrer le jeu (run())\n\n    loop Tant que le jeu est en cours\n        Game->>Grid: updateCells()\n        Grid->>Cell: Pour chaque cellule: updateState()\n        \n        alt Mode Graphique\n            Game->>DisplayManager: update(grid)\n            DisplayManager->>DisplayManager: Dessiner la grille\n        else Mode Console\n            Game->>DisplayManager: update(grid)\n            DisplayManager->>DisplayManager: Afficher l'état de la grille\n        end\n\n        Game->>Game: Incrémenter le nombre d'itérations\n        \n        alt Nombre max d'itérations atteint\n            Game->>Game: Arrêter le jeu\n        end\n    end\n\n    Game->>DisplayManager: close()\n    DisplayManager-->>Game: Fermeture de l'affichage","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":true,"editorMode":"code","pan":{"x":-81.96508295524316,"y":24.102490967728826},"zoom":1.3065292197586915},"time":1733472507495,"type":"auto","id":"0b011e3e-f03c-4b29-8ad7-09b3e4c4d6b4","name":"enough-action"},{"state":{"code":"classDiagram\n    %% Classe Cell\n    class Cell {\n        -CellState currentState\n        -CellState nextState\n        -bool isObstacle\n        +Cell(CellState initialState = CellState::DEAD)\n        +void updateState()\n        +CellState getCurrentState() const\n        +void setNextState(CellState state)\n        +void setObstacle(bool obstacle)\n        +bool isObstacleCell() const\n    }\n\n    %% Classe Grid\n    class Grid {\n        -std::vector<std::vector<Cell>> cells\n        -int width\n        -int height\n        -bool isToroidal\n        +Grid(int width, int height)\n        +void updateCells()\n        +Cell& getCellAt(int x, int y)\n        +const Cell& getCellAt(int x, int y) const\n        +void setCellAt(int x, int y, CellState state)\n        +void addObstacle(int x, int y)\n        +void addPattern(Pattern pattern, int x, int y)\n        +int getWidth() const\n        +int getHeight() const\n        +void setToroidal(bool enabled)\n        +bool getToroidal() const\n        -int countLiveNeighbors(int x, int y) const\n        -int getValidIndex(int index, int max) const\n    }\n\n    %% Interface DisplayManager\n    class DisplayManager {\n        <<interface>>\n        +~DisplayManager()\n        +void initialize()\n        +void update(const Grid& grid)\n        +void close()\n    }\n\n    %% Classe ConsoleDisplay\n    class ConsoleDisplay {\n        -int iterationCounter\n        -std::ofstream outputFile\n        +ConsoleDisplay()\n        +void initialize() override\n        +void update(const Grid& grid) override\n        +void close() override\n    }\n\n    %% Classe GraphicalDisplay\n    class GraphicalDisplay {\n        -sf::RenderWindow window\n        -sf::RenderTexture buffer\n        -float cellSize\n        -Grid* grid\n        -bool isDrawing\n        -float iterationSpeed\n        -bool paused\n        -int currentIteration\n        -int maxIterations\n        -sf::Font font\n        -sf::Text helpText\n        -sf::Text fpsText\n        -sf::RectangleShape cellShape\n        -sf::Clock fpsClock\n        -float lastFPS\n        +GraphicalDisplay(int windowWidth = 1920, int windowHeight = 1080)\n        +void initialize() override\n        +void update(const Grid& grid) override\n        +void close() override\n        +bool isWindowOpen() const\n        +void setGrid(Grid* g)\n        +void setIterationDelay(float delay)\n        +bool isPaused() const\n        +void togglePause()\n        +void setIterationCount(int count)\n        +void setMaxIterations(int max)\n        +int getIterationCount() const\n    }\n\n    %% Classe FileHandler\n    class FileHandler {\n        -static const int DEFAULT_CELLS_WIDTH\n        -static const int DEFAULT_CELLS_HEIGHT\n        +static Grid loadGridFromFile(const std::string& path)\n        +static void saveGridToFile(const Grid& grid, const std::string& path)\n    }\n\n    %% Classe RLEReader\n    class RLEReader {\n        +static Grid loadFromFile(const std::string& filename)\n        +static void loadFromFile(const std::string& filename, Grid& grid)\n    }\n\n    %% Classe ThreadPool\n    class ThreadPool {\n        -std::vector<std::thread> workers\n        -std::queue<std::function<void()>> tasks\n        -std::mutex queue_mutex\n        -std::condition_variable condition\n        -bool stop\n        +ThreadPool(size_t threads)\n        +~ThreadPool()\n        +template<class F, class... Args> auto enqueue(F&& f, Args&&... args)\n        +void shutdown()\n    }\n\n    %% Classe Game\n    class Game {\n        -Grid grid\n        -std::unique_ptr<DisplayManager> displayManager\n        -int iterationCount\n        -int maxIterations\n        -bool isRunning\n        -float iterationDelay\n        +Game(const std::string& filePath, DisplayMode mode)\n        +Game(const std::string& filePath, DisplayMode mode, FileType fileType)\n        +void run()\n        +void pause()\n        +void resume()\n        +void setIterationDelay(float ms)\n        +void updateIterationDelay(float delta)\n        +void setMaxIterations(int max)\n    }\n\n    %% Relations entre les classes\n    DisplayManager <|-- ConsoleDisplay\n    DisplayManager <|-- GraphicalDisplay\n    Game --> Grid\n    Game --> DisplayManager\n    Game --> FileHandler\n    Game --> RLEReader\n    Grid --> Cell\n","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false,"editorMode":"code"},"time":1733472267495,"type":"auto","id":"29e29bb8-50f3-4190-8156-b99ee4b89026","name":"tight-computer"},{"state":{"code":"classDiagram\n    %% Classe Cell\n    class Cell {\n        -CellState currentState\n        -CellState nextState\n        -bool isObstacle\n        +Cell(CellState initialState = CellState::DEAD)\n        +void updateState()\n        +CellState getCurrentState() const\n        +void setNextState(CellState state)\n        +void setObstacle(bool obstacle)\n        +bool isObstacleCell() const\n    }\n\n    %% Classe Grid\n    class Grid {\n        -std::vector<std::vector<Cell>> cells\n        -int width\n        -int height\n        -bool isToroidal\n        +Grid(int width, int height)\n        +void updateCells()\n        +Cell& getCellAt(int x, int y)\n        +const Cell& getCellAt(int x, int y) const\n        +void setCellAt(int x, int y, CellState state)\n        +void addObstacle(int x, int y)\n        +void addPattern(Pattern pattern, int x, int y)\n        +int getWidth() const\n        +int getHeight() const\n        +void setToroidal(bool enabled)\n        +bool getToroidal() const\n        -int countLiveNeighbors(int x, int y) const\n        -int getValidIndex(int index, int max) const\n    }\n\n    %% Interface DisplayManager\n    class DisplayManager {\n        <<Abstract>>\n        +~DisplayManager()\n        +void initialize()\n        +void update(const Grid& grid)\n        +void close()\n    }\n\n    %% Classe ConsoleDisplay\n    class ConsoleDisplay {\n        -int iterationCounter\n        -std::ofstream outputFile\n        +ConsoleDisplay()\n        +void initialize() override\n        +void update(const Grid& grid) override\n        +void close() override\n    }\n\n    %% Classe GraphicalDisplay\n    class GraphicalDisplay {\n        -sf::RenderWindow window\n        -sf::RenderTexture buffer\n        -float cellSize\n        -Grid* grid\n        -bool isDrawing\n        -float iterationSpeed\n        -bool paused\n        -int currentIteration\n        -int maxIterations\n        -sf::Font font\n        -sf::Text helpText\n        -sf::Text fpsText\n        -sf::RectangleShape cellShape\n        -sf::Clock fpsClock\n        -float lastFPS\n        +GraphicalDisplay(int windowWidth = 1920, int windowHeight = 1080)\n        +void initialize() override\n        +void update(const Grid& grid) override\n        +void close() override\n        +bool isWindowOpen() const\n        +void setGrid(Grid* g)\n        +void setIterationDelay(float delay)\n        +bool isPaused() const\n        +void togglePause()\n        +void setIterationCount(int count)\n        +void setMaxIterations(int max)\n        +int getIterationCount() const\n    }\n\n    %% Classe FileHandler\n    class FileHandler {\n        -static const int DEFAULT_CELLS_WIDTH\n        -static const int DEFAULT_CELLS_HEIGHT\n        +static Grid loadGridFromFile(const std::string& path)\n        +static void saveGridToFile(const Grid& grid, const std::string& path)\n        -static FileFormat getFileFormat(const std::string& path)\n        -static Grid loadTxtFile(const std::string& path)\n        -static Grid loadCellsFile(const std::string& path)\n        -static std::pair<int, int> parseGridDimensions(const std::string& line)\n    }\n\n    %% Classe RLEReader\n    class RLEReader {\n        +static Grid loadFromFile(const std::string& filename)\n        +static void loadFromFile(const std::string& filename, Grid& grid)\n    }\n\n    %% Classe ThreadPool\n    class ThreadPool {\n        -std::vector<std::thread> workers\n        -std::queue<std::function<void()>> tasks\n        -std::mutex queue_mutex\n        -std::condition_variable condition\n        -bool stop\n        +ThreadPool(size_t threads)\n        +~ThreadPool()\n        +template<class F, class... Args> auto enqueue(F&& f, Args&&... args)\n        +void shutdown()\n    }\n\n    %% Classe Game\n    class Game {\n        -Grid grid\n        -std::unique_ptr<DisplayManager> displayManager\n        -int iterationCount\n        -int maxIterations\n        -bool isRunning\n        -float iterationDelay\n        -float lastUpdateSpeed\n        +Game(const std::string& filePath, DisplayMode mode)\n        +Game(const std::string& filePath, DisplayMode mode, FileType fileType)\n        +void run()\n        +void pause()\n        +void resume()\n        +void setIterationDelay(float ms)\n        +void updateIterationDelay(float delta)\n        +void setMaxIterations(int max)\n    }\n\n    %% Relations entre les classes\n    DisplayManager <|-- ConsoleDisplay\n    DisplayManager <|-- GraphicalDisplay\n    Game --> Grid\n    Game --> DisplayManager\n    Game --> FileHandler\n    Game --> RLEReader\n    Grid --> Cell\n","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false,"editorMode":"code","pan":{"x":111.44515682928329,"y":-775.4229362247804},"zoom":2.1879236698150635},"time":1733472166701,"type":"auto","id":"9e1f5e65-22a3-461e-a3f2-b1919c599e39","name":"fresh-carpenter"},{"state":{"code":"classDiagram\n    Polynomial \"\" o-- \"1..*\" Monomial\n    Polynomial --|> Expression\n    Monomial --|> Expression\n    \n    class Polynomial {\n    }\n    class Monomial {\n    }\n    class Expression {\n    }\n    ","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":true,"panZoom":false,"editorMode":"code","pan":{"x":111.44515682928329,"y":-775.4229362247804},"zoom":2.1879236698150635},"time":1733472046711,"type":"auto","id":"780e4b4e-2c65-41e0-a44a-d4aa68213632","name":"immense-greece"},{"state":{"code":"classDiagram\n    class Game {\n        -Grid grid\n        -FileHandler fileHandler\n        -DisplayMode displayMode\n        -int iterationCount\n        -bool isRunning\n        +Game(string filePath, DisplayMode mode)\n        +run()\n        +pause()\n        +resume()\n        +setIterationDelay(int ms)\n        +getCurrentIteration()\n    }\n\n    class Grid {\n        -vector<vector<Cell>> cells\n        -int width\n        -int height\n        -bool isToroidal\n        +Grid(int width, int height)\n        +updateCells()\n        +getCellAt(int x, int y)\n        +setCellAt(int x, int y, CellState state)\n        +getNeighbors(int x, int y)\n        +setToroidal(bool enabled)\n        +addObstacle(int x, int y)\n        +addPattern(Pattern pattern, int x, int y)\n    }\n\n    class Cell {\n        -CellState currentState\n        -CellState nextState\n        -bool isObstacle\n        +Cell(CellState initialState)\n        +updateState()\n        +getCurrentState()\n        +setNextState(CellState state)\n        +setObstacle(bool obstacle)\n        +isObstacleCell()\n    }\n\n    class DisplayManager {\n        <<interface>>\n        +initialize()\n        +update()\n        +close()\n    }\n\n    class ConsoleDisplay {\n        -string outputPath\n        +ConsoleDisplay(string path)\n        +saveIteration(Grid grid, int iteration)\n    }\n\n    class GraphicalDisplay {\n        -sf::RenderWindow window\n        -float cellSize\n        -sf::Clock clock\n        -float updateDelay\n        +GraphicalDisplay(int width, int height)\n        +handleEvents()\n        +drawGrid(Grid grid)\n        +setUpdateDelay(float delay)\n    }\n\n    class FileHandler {\n        +loadGridFromFile(string path)\n        +saveGridToFile(Grid grid, string path)\n        -parseGridDimensions(string line)\n        -validateFileFormat(string content)\n    }\n\n    class Pattern {\n        <<enumeration>>\n        GLIDER\n        BLINKER\n        BLOCK\n        BEACON\n    }\n\n    class CellState {\n        <<enumeration>>\n        ALIVE\n        DEAD\n        OBSTACLE\n    }\n\n    class DisplayMode {\n        <<enumeration>>\n        CONSOLE\n        GRAPHICAL\n    }\n\n    Game \"1\" *-- \"1\" Grid\n    Game \"1\" *-- \"1\" FileHandler\n    Game \"1\" *-- \"1\" DisplayManager\n    Grid \"1\" *-- \"*\" Cell\n    DisplayManager <|-- ConsoleDisplay\n    DisplayManager <|-- GraphicalDisplay","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":true,"editorMode":"code","pan":{"x":111.44515682928329,"y":-775.4229362247804},"zoom":2.18792355461867},"time":1733217557619,"type":"auto","id":"68530a64-06a5-42d3-a67b-b4824c9a94e5","name":"broken-city"},{"state":{"code":"classDiagram\n    class Game {\n        -Grid grid\n        -FileHandler fileHandler\n        -DisplayMode displayMode\n        -int iterationCount\n        -bool isRunning\n        +Game(string filePath, DisplayMode mode)\n        +run()\n        +pause()\n        +resume()\n        +setIterationDelay(int ms)\n        +getCurrentIteration()\n    }\n\n    class Grid {\n        -vector<vector<Cell>> cells\n        -int width\n        -int height\n        -bool isToroidal\n        +Grid(int width, int height)\n        +updateCells()\n        +getCellAt(int x, int y)\n        +setCellAt(int x, int y, CellState state)\n        +getNeighbors(int x, int y)\n        +setToroidal(bool enabled)\n        +addObstacle(int x, int y)\n        +addPattern(Pattern pattern, int x, int y)\n    }\n\n    class Cell {\n        -CellState currentState\n        -CellState nextState\n        -bool isObstacle\n        +Cell(CellState initialState)\n        +updateState()\n        +getCurrentState()\n        +setNextState(CellState state)\n        +setObstacle(bool obstacle)\n        +isObstacleCell()\n    }\n\n    class DisplayManager {\n        <<interface>>\n        +initialize()\n        +update()\n        +close()\n    }\n\n    class ConsoleDisplay {\n        -string outputPath\n        +ConsoleDisplay(string path)\n        +saveIteration(Grid grid, int iteration)\n    }\n\n    class GraphicalDisplay {\n        -sf::RenderWindow window\n        -float cellSize\n        -sf::Clock clock\n        -float updateDelay\n        +GraphicalDisplay(int width, int height)\n        +handleEvents()\n        +drawGrid(Grid grid)\n        +setUpdateDelay(float delay)\n    }\n\n    class FileHandler {\n        +loadGridFromFile(string path)\n        +saveGridToFile(Grid grid, string path)\n        -parseGridDimensions(string line)\n        -validateFileFormat(string content)\n    }\n\n    class Pattern {\n        <<enumeration>>\n        GLIDER\n        BLINKER\n        BLOCK\n        BEACON\n    }\n\n    class CellState {\n        <<enumeration>>\n        ALIVE\n        DEAD\n        OBSTACLE\n    }\n\n    class DisplayMode {\n        <<enumeration>>\n        CONSOLE\n        GRAPHICAL\n    }\n\n    Game \"1\" *-- \"1\" Grid\n    Game \"1\" *-- \"1\" FileHandler\n    Game \"1\" *-- \"1\" DisplayManager\n    Grid \"1\" *-- \"*\" Cell\n    DisplayManager <|-- ConsoleDisplay\n    DisplayManager <|-- GraphicalDisplay","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":true,"editorMode":"code","pan":{"x":-586.5548473802606,"y":-655.4229731035726},"zoom":2.18792355461867},"time":1733217499686,"type":"auto","id":"47e51fe6-3e1c-4ed5-96f0-effc1e290b5f","name":"square-dress"},{"state":{"code":"classDiagram\n    class Game {\n        -Grid grid\n        -FileHandler fileHandler\n        -DisplayMode displayMode\n        -int iterationCount\n        -bool isRunning\n        +Game(string filePath, DisplayMode mode)\n        +run()\n        +pause()\n        +resume()\n        +setIterationDelay(int ms)\n        +getCurrentIteration()\n    }\n\n    class Grid {\n        -vector<vector<Cell>> cells\n        -int width\n        -int height\n        -bool isToroidal\n        +Grid(int width, int height)\n        +updateCells()\n        +getCellAt(int x, int y)\n        +setCellAt(int x, int y, CellState state)\n        +getNeighbors(int x, int y)\n        +setToroidal(bool enabled)\n        +addObstacle(int x, int y)\n        +addPattern(Pattern pattern, int x, int y)\n    }\n\n    class Cell {\n        -CellState currentState\n        -CellState nextState\n        -bool isObstacle\n        +Cell(CellState initialState)\n        +updateState()\n        +getCurrentState()\n        +setNextState(CellState state)\n        +setObstacle(bool obstacle)\n        +isObstacleCell()\n    }\n\n    class DisplayManager {\n        <<interface>>\n        +initialize()\n        +update()\n        +close()\n    }\n\n    class ConsoleDisplay {\n        -string outputPath\n        +ConsoleDisplay(string path)\n        +saveIteration(Grid grid, int iteration)\n    }\n\n    class GraphicalDisplay {\n        -sf::RenderWindow window\n        -float cellSize\n        -sf::Clock clock\n        -float updateDelay\n        +GraphicalDisplay(int width, int height)\n        +handleEvents()\n        +drawGrid(Grid grid)\n        +setUpdateDelay(float delay)\n    }\n\n    class FileHandler {\n        +loadGridFromFile(string path)\n        +saveGridToFile(Grid grid, string path)\n        -parseGridDimensions(string line)\n        -validateFileFormat(string content)\n    }\n\n    class Pattern {\n        <<enumeration>>\n        GLIDER\n        BLINKER\n        BLOCK\n        BEACON\n    }\n\n    class CellState {\n        <<enumeration>>\n        ALIVE\n        DEAD\n        OBSTACLE\n    }\n\n    class DisplayMode {\n        <<enumeration>>\n        CONSOLE\n        GRAPHICAL\n    }\n\n    Game \"1\" *-- \"1\" Grid\n    Game \"1\" *-- \"1\" FileHandler\n    Game \"1\" *-- \"1\" DisplayManager\n    Grid \"1\" *-- \"*\" Cell\n    DisplayManager <|-- ConsoleDisplay\n    DisplayManager <|-- GraphicalDisplay","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":true,"editorMode":"code","pan":{"x":-396.5548929057296,"y":-495.4229708114873},"zoom":2.18792355461867},"time":1733217497628,"type":"auto","id":"dc679df3-867f-4179-a1e2-7cd4d7b6492f","name":"salmon-whale"},{"state":{"code":"classDiagram\n    class Game {\n        -Grid grid\n        -FileHandler fileHandler\n        -DisplayMode displayMode\n        -int iterationCount\n        -bool isRunning\n        +Game(string filePath, DisplayMode mode)\n        +run()\n        +pause()\n        +resume()\n        +setIterationDelay(int ms)\n        +getCurrentIteration()\n    }\n\n    class Grid {\n        -vector<vector<Cell>> cells\n        -int width\n        -int height\n        -bool isToroidal\n        +Grid(int width, int height)\n        +updateCells()\n        +getCellAt(int x, int y)\n        +setCellAt(int x, int y, CellState state)\n        +getNeighbors(int x, int y)\n        +setToroidal(bool enabled)\n        +addObstacle(int x, int y)\n        +addPattern(Pattern pattern, int x, int y)\n    }\n\n    class Cell {\n        -CellState currentState\n        -CellState nextState\n        -bool isObstacle\n        +Cell(CellState initialState)\n        +updateState()\n        +getCurrentState()\n        +setNextState(CellState state)\n        +setObstacle(bool obstacle)\n        +isObstacleCell()\n    }\n\n    class DisplayManager {\n        <<interface>>\n        +initialize()\n        +update()\n        +close()\n    }\n\n    class ConsoleDisplay {\n        -string outputPath\n        +ConsoleDisplay(string path)\n        +saveIteration(Grid grid, int iteration)\n    }\n\n    class GraphicalDisplay {\n        -sf::RenderWindow window\n        -float cellSize\n        -sf::Clock clock\n        -float updateDelay\n        +GraphicalDisplay(int width, int height)\n        +handleEvents()\n        +drawGrid(Grid grid)\n        +setUpdateDelay(float delay)\n    }\n\n    class FileHandler {\n        +loadGridFromFile(string path)\n        +saveGridToFile(Grid grid, string path)\n        -parseGridDimensions(string line)\n        -validateFileFormat(string content)\n    }\n\n    class Pattern {\n        <<enumeration>>\n        GLIDER\n        BLINKER\n        BLOCK\n        BEACON\n    }\n\n    class CellState {\n        <<enumeration>>\n        ALIVE\n        DEAD\n        OBSTACLE\n    }\n\n    class DisplayMode {\n        <<enumeration>>\n        CONSOLE\n        GRAPHICAL\n    }\n\n    Game \"1\" *-- \"1\" Grid\n    Game \"1\" *-- \"1\" FileHandler\n    Game \"1\" *-- \"1\" DisplayManager\n    Grid \"1\" *-- \"*\" Cell\n    DisplayManager <|-- ConsoleDisplay\n    DisplayManager <|-- GraphicalDisplay","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":true,"editorMode":"code","pan":{"x":-22.554827721302885,"y":-799.4229674468783},"zoom":2.18792355461867},"time":1733217437620,"type":"auto","id":"f649a9c8-74f5-4813-9e62-f5ed47546d8d","name":"kind-cpu"},{"state":{"code":"classDiagram\n    class Game {\n        -Grid grid\n        -FileHandler fileHandler\n        -DisplayMode displayMode\n        -int iterationCount\n        -bool isRunning\n        +Game(string filePath, DisplayMode mode)\n        +run()\n        +pause()\n        +resume()\n        +setIterationDelay(int ms)\n        +getCurrentIteration()\n    }\n\n    class Grid {\n        -vector<vector<Cell>> cells\n        -int width\n        -int height\n        -bool isToroidal\n        +Grid(int width, int height)\n        +updateCells()\n        +getCellAt(int x, int y)\n        +setCellAt(int x, int y, CellState state)\n        +getNeighbors(int x, int y)\n        +setToroidal(bool enabled)\n        +addObstacle(int x, int y)\n        +addPattern(Pattern pattern, int x, int y)\n    }\n\n    class Cell {\n        -CellState currentState\n        -CellState nextState\n        -bool isObstacle\n        +Cell(CellState initialState)\n        +updateState()\n        +getCurrentState()\n        +setNextState(CellState state)\n        +setObstacle(bool obstacle)\n        +isObstacleCell()\n    }\n\n    class DisplayManager {\n        <<interface>>\n        +initialize()\n        +update()\n        +close()\n    }\n\n    class ConsoleDisplay {\n        -string outputPath\n        +ConsoleDisplay(string path)\n        +saveIteration(Grid grid, int iteration)\n    }\n\n    class GraphicalDisplay {\n        -sf::RenderWindow window\n        -float cellSize\n        -sf::Clock clock\n        -float updateDelay\n        +GraphicalDisplay(int width, int height)\n        +handleEvents()\n        +drawGrid(Grid grid)\n        +setUpdateDelay(float delay)\n    }\n\n    class FileHandler {\n        +loadGridFromFile(string path)\n        +saveGridToFile(Grid grid, string path)\n        -parseGridDimensions(string line)\n        -validateFileFormat(string content)\n    }\n\n    class Pattern {\n        <<enumeration>>\n        GLIDER\n        BLINKER\n        BLOCK\n        BEACON\n    }\n\n    class CellState {\n        <<enumeration>>\n        ALIVE\n        DEAD\n        OBSTACLE\n    }\n\n    class DisplayMode {\n        <<enumeration>>\n        CONSOLE\n        GRAPHICAL\n    }\n\n    Game \"1\" *-- \"1\" Grid\n    Game \"1\" *-- \"1\" FileHandler\n    Game \"1\" *-- \"1\" DisplayManager\n    Grid \"1\" *-- \"*\" Cell\n    DisplayManager <|-- ConsoleDisplay\n    DisplayManager <|-- GraphicalDisplay","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":true,"editorMode":"code","pan":{"x":73.12326056695917,"y":-100.09137189556459},"zoom":1.0716757774353027},"time":1733217377621,"type":"auto","id":"343fa406-266a-4602-b611-46a26a3097f1","name":"big-megabyte"},{"state":{"code":"classDiagram\n    class Cell{\n\n    }\n\n    class Grid{\n\n    }\n\n    class Renderer{\n\n    }\n    ","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false,"editorMode":"code","pan":{"x":73.12326056695917,"y":-100.09137189556459},"zoom":1.0716757774353027},"time":1733211557312,"type":"auto","id":"015cd0a9-f0ae-4825-91fc-517525ce0cba","name":"melted-electrician"},{"state":{"code":"classDiagram\n    Polynomial \"\" o-- \"1..*\" Monomial\n    Polynomial --|> Expression\n    Monomial --|> Expression\n    \n    class Polynomial {\n    }\n    class Monomial {\n    }\n    class Expression {\n    }\n\n    class GameManager{\n\n    }\n\n    class Cell{\n\n    }\n\n    class Grid{\n\n    }\n\n    class Renderer{\n        \n    }\n    ","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false,"editorMode":"code","pan":{"x":73.12326056695917,"y":-100.09137189556459},"zoom":1.0716757774353027},"time":1733211257110,"type":"auto","id":"fe2845e2-a95a-45b8-92fe-017240744e78","name":"shy-account"},{"state":{"code":"classDiagram\n    Polynomial \"\" o-- \"1..*\" Monomial\n    Polynomial --|> Expression\n    Monomial --|> Expression\n    \n    class Polynomial {\n    }\n    class Monomial {\n    }\n    class Expression {\n    }\n\n    class GameManager{\n\n    }\n\n    class Cell{\n\n    }\n\n    class Grid{\n\n    }\n\n    class \n    ","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false,"editorMode":"code","pan":{"x":73.12326056695917,"y":-100.09137189556459},"zoom":1.0716757774353027},"time":1733211197100,"type":"auto","id":"d824afe1-b00b-47d0-af43-5fd558fd25f4","name":"orange-insect"},{"state":{"code":"classDiagram\n    Polynomial \"\" o-- \"1..*\" Monomial\n    Polynomial --|> Expression\n    Monomial --|> Expression\n    \n    class Polynomial {\n    }\n    class Monomial {\n    }\n    class Expression {\n    }\n\n    class GameManager{\n\n    }\n\n    class Cell{\n\n    }\n\n    class Grid{\n        \n    }\n    ","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false,"editorMode":"code","pan":{"x":73.12326056695917,"y":-100.09137189556459},"zoom":1.0716757774353027},"time":1733211137101,"type":"auto","id":"99f4fc16-c069-4de6-9822-33578a9db8a0","name":"victorious-ghost"},{"state":{"code":"classDiagram\n    class Grid {\n        -int rows\n        -int columns\n        -vector<Cell> cells\n        +Grid(int rows, int columns)\n        +loadFromFile(string filename)\n        +updateGrid()\n        +getCell(int x, int y) : Cell&\n        +displayConsole()\n        +displayGraphical()\n        +evolve(Grid&)\n    }\n\n    class Cell {\n        -bool isAlive\n        -bool isObstacle\n        -int x\n        -int y\n        +Cell(bool state, int x, int y)\n        +getState() : bool\n        +setState(bool state)\n        +getNeighborsCount(Grid& grid) : int\n        +evolve(Grid& grid)\n    }\n\n    class GameManager {\n        -Grid gameGrid\n        -int maxIterations\n        -bool toroidalMode\n        +GameOfLife(string inputFile)\n        +runConsoleMode()\n        +runGraphicalMode()\n        +saveIteration(int iterationNumber)\n    }\n\n    class GraphicalInterface {\n        -sf::RenderWindow window\n        -Grid& gameGrid\n        +GraphicalInterface(Grid& grid)\n        +drawGrid()\n        +handleEvents()\n        +updateDisplay()\n        +setIterationSpeed()\n    }\n\n    Grid \"1\" *-- \"many\" Cell : contains\n    GameManager \"1\" *-- \"1\" Grid : manage\n    GameManager \"1\" -- \"1\" GraphicalInterface : uses ","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":true,"panZoom":true,"editorMode":"code","pan":{"x":73.12326056695917,"y":-100.09137189556459},"zoom":1.0716757774353027},"time":1733158297249,"type":"auto","id":"c03a3bf3-b6c9-4576-8ff6-ed47a4e6dbcf","name":"hissing-book"},{"state":{"code":"classDiagram\n    class Grid {\n        -int rows\n        -int columns\n        -vector<Cell> cells\n        +Grid(int rows, int columns)\n        +loadFromFile(string filename)\n        +updateGrid()\n        +getCell(int x, int y) : Cell&\n        +displayConsole()\n        +displayGraphical()\n        +evolve(Grid&)\n    }\n\n    class Cell {\n        -bool isAlive\n        -bool isObstacle\n        -int x\n        -int y\n        +Cell(bool state, int x, int y)\n        +getState() : bool\n        +setState(bool state)\n        +getNeighborsCount(Grid& grid) : int\n        +evolve(Grid& grid)\n    }\n\n    class GameManager {\n        -Grid gameGrid\n        -int maxIterations\n        -bool toroidalMode\n        +GameOfLife(string inputFile)\n        +runConsoleMode()\n        +runGraphicalMode()\n        +saveIteration(int iterationNumber)\n    }\n\n    class GraphicalInterface {\n        -sf::RenderWindow window\n        -Grid& gameGrid\n        +GraphicalInterface(Grid& grid)\n        +drawGrid()\n        +handleEvents()\n        +updateDisplay()\n        +setIterationSpeed()\n    }\n\n    Grid \"1\" *-- \"many\" Cell : contains\n    GameManager \"1\" *-- \"1\" Grid : manage\n    GameManager \"1\" -- \"1\" GraphicalInterface : uses ","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":true,"editorMode":"code","pan":{"x":73.12326056695917,"y":-100.09137189556459},"zoom":1.0716757774353027},"time":1733149634251,"type":"auto","id":"8a9a35db-6aee-4a9a-90f5-75280e4cc04d","name":"drab-cricket"},{"state":{"code":"classDiagram\n    class Grid {\n        -int rows\n        -int columns\n        -vector<Cell> cells\n        +Grid(int rows, int columns)\n        +loadFromFile(string filename)\n        +updateGrid()\n        +getCell(int x, int y) : Cell&\n        +displayConsole()\n        +displayGraphical()\n        +evolve(Grid& grid)\n    }\n\n    class Cell {\n        -bool isAlive\n        -bool isObstacle\n        -int x\n        -int y\n        +Cell(bool state, int x, int y)\n        +getState() : bool\n        +setState(bool state)\n        +getNeighborsCount(Grid& grid) : int\n    }\n\n    class GameManager {\n        -Grid gameGrid\n        -int maxIterations\n        -bool toroidalMode\n        +GameOfLife(string inputFile)\n        +runConsoleMode()\n        +runGraphicalMode()\n        +saveIteration(int iterationNumber)\n    }\n\n    class GraphicalInterface {\n        -sf::RenderWindow window\n        -Grid& gameGrid\n        +GraphicalInterface(Grid& grid)\n        +drawGrid()\n        +handleEvents()\n        +updateDisplay()\n        +setIterationSpeed()\n    }\n\n    Grid \"1\" *-- \"many\" Cell : contains\n    GameManager \"1\" *-- \"1\" Grid : manage\n    GameManager \"1\" -- \"1\" GraphicalInterface : uses //","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":true,"editorMode":"code","pan":{"x":315.88352749484415,"y":0},"zoom":1},"time":1733144489178,"type":"auto","id":"f98a98a5-64a2-49ef-a403-8a580504c7e7","name":"helpful-jelly"},{"state":{"code":"classDiagram\n    class Grid {\n        -int rows\n        -int columns\n        -vector<Cell> cells\n        +Grid(int rows, int columns)\n        +loadFromFile(string filename)\n        +updateGrid()\n        +getCell(int x, int y) : Cell&\n        +displayConsole()\n        +displayGraphical()\n        +evolve(Grid& grid)\n    }\n\n    class Cell {\n        -bool isAlive\n        -bool isObstacle\n        -int x\n        -int y\n        +Cell(bool state, int x, int y)\n        +getState() : bool\n        +setState(bool state)\n        +getNeighborsCount(Grid& grid) : int\n    }\n\n    class GameManager {\n        -Grid gameGrid\n        -int maxIterations\n        -bool toroidalMode\n        +GameOfLife(string inputFile)\n        +runConsoleMode()\n        +runGraphicalMode()\n        +saveIteration(int iterationNumber)\n    }\n\n    class GraphicalInterface {\n        -sf::RenderWindow window\n        -Grid& gameGrid\n        +GraphicalInterface(Grid& grid)\n        +drawGrid()\n        +handleEvents()\n        +updateDisplay()\n        +setIterationSpeed()\n    }\n\n    Grid \"1\" *-- \"many\" Cell : contains\n    GameManager \"1\" *-- \"1\" Grid : manage\n    GameManager \"1\" -- \"1\" GraphicalInterface : uses //","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":true,"editorMode":"code","pan":{"x":303.8834950046469,"y":0},"zoom":1},"time":1733144069252,"type":"auto","id":"9565bc66-dbd6-446c-aeb8-94a9ba101c30","name":"curved-afternoon"},{"state":{"code":"classDiagram\n    class Grid {\n        -int rows\n        -int columns\n        -vector<Cell> cells\n        +Grid(int rows, int columns)\n        +loadFromFile(string filename)\n        +updateGrid()\n        +getCell(int x, int y) : Cell&\n        +displayConsole()\n        +displayGraphical()\n        +evolve(Grid& grid)\n    }\n\n    class Cell {\n        -bool isAlive\n        -bool isObstacle\n        -int x\n        -int y\n        +Cell(bool state, int x, int y)\n        +getState() : bool\n        +setState(bool state)\n        +getNeighborsCount(Grid& grid) : int\n        +evolve//(Grid& \n    }\n\n    class GameManager {\n        -Grid gameGrid\n        -int maxIterations\n        -bool toroidalMode\n        +GameOfLife(string inputFile)\n        +runConsoleMode()\n        +runGraphicalMode()\n        +saveIteration(int iterationNumber)\n    }\n\n    class GraphicalInterface {\n        -sf::RenderWindow window\n        -Grid& gameGrid\n        +GraphicalInterface(Grid& grid)\n        +drawGrid()\n        +handleEvents()\n        +updateDisplay()\n        +setIterationSpeed()\n    }\n\n    Grid \"1\" *-- \"many\" Cell : contains\n    GameManager \"1\" *-- \"1\" Grid : manage\n    GameManager \"1\" -- \"1\" GraphicalInterface : uses //","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":true,"editorMode":"code","pan":{"x":303.8834950046469,"y":0},"zoom":1.0000000066679888},"time":1733143982639,"type":"auto","id":"da22feb3-9a9a-4911-a02d-84279d515250","name":"gorgeous-night"},{"state":{"code":"classDiagram\n    class Grid {\n        -int rows\n        -int columns\n        -vector<Cell> cells\n        +Grid(int rows, int columns)\n        +loadFromFile(string filename)\n        +updateGrid()\n        +getCell(int x, int y) : Cell&\n        +displayConsole()\n        +displayGraphical()\n    }\n\n    class Cell {\n        -bool isAlive\n        -bool isObstacle\n        -int x\n        -int y\n        +Cell(bool state, int x, int y)\n        +getState() : bool\n        +setState(bool state)\n        +getNeighborsCount(Grid& grid) : int\n        +evolve//(Grid& grid)\n    }\n\n    class GameManager {\n        -Grid gameGrid\n        -int maxIterations\n        -bool toroidalMode\n        +GameOfLife(string inputFile)\n        +runConsoleMode()\n        +runGraphicalMode()\n        +saveIteration(int iterationNumber)\n    }\n\n    class GraphicalInterface {\n        -sf::RenderWindow window\n        -Grid& gameGrid\n        +GraphicalInterface(Grid& grid)\n        +drawGrid()\n        +handleEvents()\n        +updateDisplay()\n        +setIterationSpeed()\n    }\n\n    Grid \"1\" *-- \"many\" Cell : contains\n    GameManager \"1\" *-- \"1\" Grid : manage\n    GameManager \"1\" -- \"1\" GraphicalInterface : uses //","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":true,"editorMode":"code","pan":{"x":73.12326056695917,"y":-100.09137189556459},"zoom":1.0716757774353027},"time":1733135283250,"type":"auto","id":"15480b0b-8461-4c16-acac-c71d1dfd45f5","name":"tight-optician"},{"state":{"code":"classDiagram\n    class Grid {\n        -int rows\n        -int columns\n        -vector<Cell> cells\n        +Grid(int rows, int columns)\n        +loadFromFile(string filename)\n        +updateGrid()\n        +getCell(int x, int y) : Cell&\n        +displayConsole()\n        +displayGraphical()\n    }\n\n    class Cell {\n        -bool isAlive\n        -bool isObstacle\n        -int x\n        -int y\n        +Cell(bool state, int x, int y)\n        +getState() : bool\n        +setState(bool state)\n        +getNeighborsCount(Grid& grid) : int\n        +evolve(Grid& grid)\n    }\n\n    class GameManager {\n        -Grid gameGrid\n        -int maxIterations\n        -bool toroidalMode\n        +GameOfLife(string inputFile)\n        +runConsoleMode()\n        +runGraphicalMode()\n        +saveIteration(int iterationNumber)\n    }\n\n    class GraphicalInterface {\n        -sf::RenderWindow window\n        -Grid& gameGrid\n        +GraphicalInterface(Grid& grid)\n        +drawGrid()\n        +handleEvents()\n        +updateDisplay()\n        +setIterationSpeed()\n    }\n\n    Grid \"1\" *-- \"many\" Cell : contains\n    GameManager \"1\" *-- \"1\" Grid : manage\n    GameManager \"1\" -- \"1\" GraphicalInterface : uses //","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":true,"editorMode":"code","pan":{"x":73.12326056695917,"y":-100.09137189556459},"zoom":1.0716758084642404},"time":1733135222641,"type":"auto","id":"944ca2ac-3eec-4bfa-9a57-f98dfd04593d","name":"fancy-greece"},{"state":{"code":"classDiagram\n    class Grid {\n        -int rows\n        -int columns\n        -vector<Cell> cells\n        +Grid(int rows, int columns)\n        +loadFromFile(string filename)\n        +updateGrid()\n        +getCell(int x, int y) : Cell&\n        +displayConsole()\n        +displayGraphical()\n    }\n\n    class Cell {\n        -bool isAlive\n        -bool isObstacle\n        -int x\n        -int y\n        +Cell(bool state, int x, int y)\n        +getState() : bool\n        +setState(bool state)\n        +getNeighborsCount(Grid& grid) : int\n        +evolve(Grid& grid)\n    }\n\n    class GameManager {\n        -Grid gameGrid\n        -int maxIterations\n        -bool toroidalMode\n        +GameOfLife(string inputFile)\n        +runConsoleMode()\n        +runGraphicalMode()\n        +saveIteration(int iterationNumber)\n    }\n\n    class GraphicalInterface {\n        -sf::RenderWindow window\n        -Grid& gameGrid\n        +GraphicalInterface(Grid& grid)\n        +drawGrid()\n        +handleEvents()\n        +updateDisplay()\n        +setIterationSpeed()\n    }\n\n    Grid \"1\" *-- \"many\" Cell : contains\n    GameManager \"1\" *-- \"1\" Grid : manage\n    GameManager \"1\" -- \"1\" GraphicalInterface : uses ","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":true,"editorMode":"code","pan":{"x":36.43037850486784,"y":62.69829558988931},"zoom":0.9396874308586122},"time":1733135162638,"type":"auto","id":"37e4737e-b22b-46aa-af91-1aa40d33a907","name":"abundant-pencil"},{"state":{"code":"classDiagram\n    class Grid {\n        -int rows\n        -int columns\n        -vector<Cell> cells\n        +Grid(int rows, int columns)\n        +loadFromFile(string filename)\n        +updateGrid()\n        +getCell(int x, int y) : Cell&\n        +displayConsole()\n        +displayGraphical()\n    }\n\n    class Cell {\n        -bool isAlive\n        -bool isObstacle\n        -int x\n        -int y\n        +Cell(bool state, int x, int y)\n        +getState() : bool\n        +setState(bool state)\n        +getNeighborsCount(Grid& grid) : int\n        +evolve(Grid& grid)\n    }\n\n    class GameManager {\n        -Grid gameGrid\n        -int maxIterations\n        -bool toroidalMode\n        +GameOfLife(string inputFile)\n        +runConsoleMode()\n        +runGraphicalMode()\n        +saveIteration(int iterationNumber)\n    }\n\n    class GraphicalInterface {\n        -sf::RenderWindow window\n        -Grid& gameGrid\n        +GraphicalInterface(Grid& grid)\n        +drawGrid()\n        +handleEvents()\n        +updateDisplay()\n        +setIterationSpeed()\n    }\n\n    Grid \"1\" *-- \"many\" Cell : contains\n    GameManager \"1\" *-- \"1\" Grid : manage\n    GameManager \"1\" -- \"1\" GraphicalInterface : uses","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":true,"editorMode":"code","pan":{"x":37.9194801095457,"y":39.14140587676638},"zoom":0.9686575360152924},"time":1733135102638,"type":"auto","id":"e3d237ff-c321-4980-9337-8e5f91fc5f90","name":"careful-art"},{"state":{"code":"classDiagram\n    class Grid {\n        -int rows\n        -int columns\n        -vector<Cell> cells\n        +Grid(int rows, int columns)\n        +loadFromFile(string filename)\n        +updateGrid()\n        +getCell(int x, int y) : Cell&\n        +displayConsole()\n        +displayGraphical()\n    }\n\n    class Cell {\n        -bool isAlive\n        -bool isObstacle\n        -int x\n        -int y\n        +Cell(bool state, int x, int y)\n        +getState() : bool\n        +setState(bool state)\n        +getNeighborsCount(Grid& grid) : int\n        +evolve(Grid& grid)\n    }\n\n    class GameManager {\n        -Grid gameGrid\n        -int maxIterations\n        -bool toroidalMode\n        +GameOfLife(string inputFile)\n        +runConsoleMode()\n        +runGraphicalMode()\n        +saveIteration(int iterationNumber)\n    }\n\n    class GraphicalInterface {\n        -sf::RenderWindow window\n        -Grid& gameGrid\n        +GraphicalInterface(Grid& grid)\n        +drawGrid()\n        +handleEvents()\n        +updateDisplay()\n        +setIterationSpeed()\n    }\n\n    Grid \"1\" *-- \"many\" Cell : contains\n    GameManager \"1\" *-- \"1\" GameManager : manage\n    GameManager \"1\" -- \"1\" GraphicalInterface : uses","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":true,"editorMode":"code","pan":{"x":172.04246534694423,"y":185.69079288044577},"zoom":0.6616060733795166},"time":1733134203250,"type":"auto","id":"e74f4b1e-beb1-4c78-ab86-2dc17b3c7087","name":"clean-scooter"},{"state":{"code":"classDiagram\n    class Grid {\n        -int rows\n        -int columns\n        -vector<Cell> cells\n        +Grid(int rows, int columns)\n        +loadFromFile(string filename)\n        +updateGrid()\n        +getCell(int x, int y) : Cell&\n        +displayConsole()\n        +displayGraphical()\n    }\n\n    class Cell {\n        -bool isAlive\n        -bool isObstacle\n        -int x\n        -int y\n        +Cell(bool state, int x, int y)\n        +getState() : bool\n        +setState(bool state)\n        +getNeighborsCount(Grid& grid) : int\n        +evolve(Grid& grid)\n    }\n\n    class GameManager {\n        -Grid gameGrid\n        -int maxIterations\n        -bool toroidalMode\n        +GameOfLife(string inputFile)\n        +runConsoleMode()\n        +runGraphicalMode()\n        +saveIteration(int iterationNumber)\n    }\n\n    class GraphicalInterface {\n        -sf::RenderWindow window\n        -Grid& gameGrid\n        +GraphicalInterface(Grid& grid)\n        +drawGrid()\n        +handleEvents()\n        +updateDisplay()\n        +setIterationSpeed()\n    }\n\n    Grid \"1\" *-- \"many\" Cell : contains\n    GameManager \"1\" *-- \"1\" : manages\n    GameManager \"1\" -- \"1\" GraphicalInterface : uses","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":true,"editorMode":"code","pan":{"x":169.8107624799414,"y":172.59044457718227},"zoom":0.6812176704406738},"time":1733134142638,"type":"auto","id":"98bb82cb-acc0-4574-b0b2-ebf37870b1a0","name":"little-nightfall"},{"state":{"code":"classDiagram\n    class Grid {\n        -int rows\n        -int columns\n        -vector<Cell> cells\n        +Grid(int rows, int columns)\n        +loadFromFile(string filename)\n        +updateGrid()\n        +getCell(int x, int y) : Cell&\n        +displayConsole()\n        +displayGraphical()\n    }\n\n    class Cell {\n        -bool isAlive\n        -bool isObstacle\n        -int x\n        -int y\n        +Cell(bool state, int x, int y)\n        +getState() : bool\n        +setState(bool state)\n        +getNeighborsCount(Grid& grid) : int\n        +evolve(Grid& grid)\n    }\n\n    class GameManager {\n        -Grid gameGrid\n        -int maxIterations\n        -bool toroidalMode\n        +GameOfLife(string inputFile)\n        +runConsoleMode()\n        +runGraphicalMode()\n        +saveIteration(int iterationNumber)\n    }\n\n    class GraphicalInterface {\n        -sf::RenderWindow window\n        -Grid& gameGrid\n        +GraphicalInterface(Grid& grid)\n        +drawGrid()\n        +handleEvents()\n        +updateDisplay()\n        +setIterationSpeed()\n    }\n\n    Grid \"1\" *-- \"many\" Cell : contains\n    GameManager \"1\" *-- \"1\" Grid : manages\n    GameManager \"1\" -- \"1\" GraphicalInterface : uses","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":true,"editorMode":"code","pan":{"x":-7.436259568995133,"y":-314.96820325156204},"zoom":1.596727955764411},"time":1733130242641,"type":"auto","id":"2d8b3a7d-4ffe-4749-bb4a-d7710a7f132c","name":"black-yacht"},{"state":{"code":"classDiagram\n    class Grid {\n        -int rows\n        -int columns\n        -vector<Cell> cells\n        +Grid(int rows, int columns)\n        +loadFromFile(string filename)\n        +updateGrid()\n        +getCell(int x, int y) : Cell&\n        +displayConsole()\n        +displayGraphical()\n    }\n\n    class Cell {\n        -bool isAlive\n        -bool isObstacle\n        -int x\n        -int y\n        +Cell(bool state, int x, int y)\n        +getState() : bool\n        +setState(bool state)\n        +getNeighborsCount(Grid& grid) : int\n        +evolve(Grid& grid)\n    }\n\n    class GameManager {\n        -Grid gameGrid\n        -int maxIterations\n        -bool toroidalMode\n        +GameOfLife(string inputFile)\n        +runConsoleMode()\n        +runGraphicalMode()\n        +saveIteration(int iterationNumber)\n    }\n\n    class GraphicalInterface {\n        -sf::RenderWindow window\n        -Grid& gameGrid\n        +GraphicalInterface(Grid& grid)\n        +drawGrid()\n        +handleEvents()\n        +updateDisplay()\n        +setIterationSpeed()\n    }\n\n    Grid \"1\" *-- \"many\" Cell : contains\n    GameManager \"1\" *-- \"1\" Grid : manages\n    GameManager \"1\" -- \"1\" GraphicalInterface : uses","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":true,"editorMode":"code","pan":{"x":-53.43623941693917,"y":-369.96816267497326},"zoom":1.596727955764411},"time":1733130182640,"type":"auto","id":"c573d1c0-429e-476a-a241-16f23c23b6b6","name":"aloof-gold"},{"state":{"code":"classDiagram\n    class Grid {\n        -int rows\n        -int columns\n        -vector<Cell> cells\n        +Grid(int rows, int columns)\n        +loadFromFile(string filename)\n        +updateGrid()\n        +getCell(int x, int y) : Cell&\n        +displayConsole()\n        +displayGraphical()\n    }\n\n    class Cell {\n        -bool isAlive\n        -bool isObstacle\n        -int x\n        -int y\n        +Cell(bool state, int x, int y)\n        +getState() : bool\n        +setState(bool state)\n        +getNeighborsCount(Grid& grid) : int\n        +evolve(Grid& grid)\n    }\n\n    class GameManager {\n        -Grid gameGrid\n        -int maxIterations\n        -bool toroidalMode\n        +GameOfLife(string inputFile)\n        +runConsoleMode()\n        +runGraphicalMode()\n        +saveIteration(int iterationNumber)\n    }\n\n    class GraphicalInterface {\n        -sf::RenderWindow window\n        -Grid& gameGrid\n        +GraphicalInterface(Grid& grid)\n        +drawGrid()\n        +handleEvents()\n        +updateDisplay()\n        +setIterationSpeed()\n    }\n\n    Grid \"1\" *-- \"many\" Cell : contains\n    GameManager \"1\" *-- \"1\" Grid : manages\n    GameManager \"1\" -- \"1\" GraphicalInterface : uses","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":true,"editorMode":"code","pan":{"x":46.56379019290016,"y":-503.9681189545574},"zoom":1.596727955764411},"time":1733129882642,"type":"auto","id":"911f512f-6ba0-45f5-b1f6-c827edf1cb4f","name":"better-pager"},{"state":{"code":"classDiagram\n    class Grid {\n        -int rows\n        -int columns\n        -vector<Cell> cells\n        +Grid(int rows, int columns)\n        +loadFromFile(string filename)\n        +updateGrid()\n        +getCell(int x, int y) : Cell&\n        +displayConsole()\n        +displayGraphical()\n    }\n\n    class Cell {\n        -bool isAlive\n        -bool isObstacle\n        -int x\n        -int y\n        +Cell(bool state, int x, int y)\n        +getState() : bool\n        +setState(bool state)\n        +getNeighborsCount(Grid& grid) : int\n        +evolve(Grid& grid)\n    }\n\n    class GameManager {\n        -Grid gameGrid\n        -int maxIterations\n        -bool toroidalMode\n        +GameOfLife(string inputFile)\n        +runConsoleMode()\n        +runGraphicalMode()\n        +saveIteration(int iterationNumber)\n    }\n\n    class GraphicalInterface {\n        -sf::RenderWindow window\n        -Grid& gameGrid\n        +GraphicalInterface(Grid& grid)\n        +drawGrid()\n        +handleEvents()\n        +updateDisplay()\n        +setIterationSpeed()\n    }\n\n    Grid \"1\" *-- \"many\" Cell : contains\n    GameManager \"1\" *-- \"1\" Grid : manages\n    GameManager \"1\" -- \"1\" GraphicalInterface : uses","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":true,"editorMode":"code","pan":{"x":-17.436217729615123,"y":-205.96809068080023},"zoom":1.596727955764411},"time":1733129822638,"type":"auto","id":"4b7374a2-afa8-4a93-8e30-a1c3694cca31","name":"howling-cartoon"},{"state":{"code":"classDiagram\n    class Grid {\n        -int rows\n        -int columns\n        -vector<Cell> cells\n        +Grid(int rows, int columns)\n        +loadFromFile(string filename)\n        +updateGrid()\n        +getCell(int x, int y) : Cell&\n        +displayConsole()\n        +displayGraphical()\n    }\n\n    class Cell {\n        -bool isAlive\n        -bool isObstacle\n        -int x\n        -int y\n        +Cell(bool state, int x, int y)\n        +getState() : bool\n        +setState(bool state)\n        +getNeighborsCount(Grid& grid) : int\n        +evolve(Grid& grid)\n    }\n\n    class GameManager {\n        -Grid gameGrid\n        -int maxIterations\n        -bool toroidalMode\n        +GameOfLife(string inputFile)\n        +runConsoleMode()\n        +runGraphicalMode()\n        +saveIteration(int iterationNumber)\n    }\n\n    class GraphicalInterface {\n        -sf::RenderWindow window\n        -Grid& gameGrid\n        +GraphicalInterface(Grid& grid)\n        +drawGrid()\n        +handleEvents()\n        +updateDisplay()\n        +setIterationSpeed()\n    }\n\n    Grid \"1\" *-- \"many\" Cell : contains\n    GameManager \"1\" *-- \"1\" Grid : manages\n    GameManager \"1\" -- \"1\" GraphicalInterface : uses","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":true,"editorMode":"code","pan":{"x":73.53327446722191,"y":-52.88193239061013},"zoom":1.3712055848472815},"time":1733129522644,"type":"auto","id":"ccc2adad-c220-4161-992e-8933c8fa7fbc","name":"damaged-river"},{"state":{"code":"classDiagram\n    class Grid {\n        -int rows\n        -int columns\n        -vector<Cell> cells\n        +Grid(int rows, int columns)\n        +loadFromFile(string filename)\n        +updateGrid()\n        +getCell(int x, int y) : Cell&\n        +displayConsole()\n        +displayGraphical()\n    }\n\n    class Cell {\n        -bool isAlive\n        -bool isObstacle\n        -int x\n        -int y\n        +Cell(bool state, int x, int y)\n        +getState() : bool\n        +setState(bool state)\n        +getNeighborsCount(Grid& grid) : int\n        +evolve(Grid& grid)\n    }\n\n    class GameManager {\n        -Grid gameGrid\n        -int maxIterations\n        -bool toroidalMode\n        +GameOfLife(string inputFile)\n        +runConsoleMode()\n        +runGraphicalMode()\n        +saveIteration(int iterationNumber)\n    }\n\n    class GraphicalInterface {\n        -sf::RenderWindow window\n        -Grid& gameGrid\n        +GraphicalInterface(Grid& grid)\n        +drawGrid()\n        +handleEvents()\n        +updateDisplay()\n        +setIterationSpeed()\n    }\n\n    Grid \"1\" *-- \"many\" Cell : contains\n    GameManager \"1\" *-- \"1\" Grid : manages\n    GameManager \"1\" -- \"1\" GraphicalInterface : uses","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":true,"editorMode":"code","pan":{"x":85.6063800372191,"y":0.2103205847738403},"zoom":1.044980764389038},"time":1733129402647,"type":"auto","id":"60797e9d-bbac-494d-9b79-18981d3932b6","name":"savory-spring"},{"state":{"code":"classDiagram\n    class Grid {\n        -int rows\n        -int columns\n        -vector<Cell> cells\n        +Grid(int rows, int columns)\n        +loadFromFile(string filename)\n        +updateGrid()\n        +getCell(int x, int y) : Cell&\n        +displayConsole()\n        +displayGraphical()\n    }\n\n    class Cell {\n        -bool isAlive\n        -bool isObstacle\n        -int x\n        -int y\n        +Cell(bool state, int x, int y)\n        +getState() : bool\n        +setState(bool state)\n        +getNeighborsCount(Grid& grid) : int\n        +evolve(Grid& grid)\n    }\n\n    class GameManager {\n        -Grid gameGrid\n        -int maxIterations\n        -bool toroidalMode\n        +GameOfLife(string inputFile)\n        +runConsoleMode()\n        +runGraphicalMode()\n        +saveIteration(int iterationNumber)\n    }\n\n    class GraphicalInterface {\n        -sf::RenderWindow window\n        -Grid& gameGrid\n        +GraphicalInterface(Grid& grid)\n        +drawGrid()\n        +handleEvents()\n        +updateDisplay()\n        +setIterationSpeed()\n    }\n\n    Grid \"1\" *-- \"many\" Cell : contains\n    GameOfLife \"1\" *-- \"1\" Grid : manages\n    GameOfLife \"1\" -- \"1\" GraphicalInterface : uses","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":true,"editorMode":"code","pan":{"x":81.60632095968323,"y":-4.78967969017385},"zoom":1.044980764389038},"time":1733127063263,"type":"auto","id":"daf54671-384b-42e9-a707-e4e7bf66ef62","name":"famous-evening"},{"state":{"code":"classDiagram\n    class Grid {\n        -int rows\n        -int columns\n        -vector<Cell> cells\n        +Grid(int rows, int columns)\n        +loadFromFile(string filename)\n        +updateGrid()\n        +getCell(int x, int y) : Cell&\n        +displayConsole()\n        +displayGraphical()\n    }\n\n    class Cell {\n        -bool isAlive\n        -bool isObstacle\n        -int x\n        -int y\n        +Cell(bool state, int x, int y)\n        +getState() : bool\n        +setState(bool state)\n        +getNeighborsCount(Grid& grid) : int\n        +evolve(Grid& grid)\n    }\n\n    class GameOfLife {\n        -Grid gameGrid\n        -int maxIterations\n        -bool toroidalMode\n        +GameOfLife(string inputFile)\n        +runConsoleMode()\n        +runGraphicalMode()\n        +saveIteration(int iterationNumber)\n    }\n\n    class GraphicalInterface {\n        -sf::RenderWindow window\n        -Grid& gameGrid\n        +GraphicalInterface(Grid& grid)\n        +drawGrid()\n        +handleEvents()\n        +updateDisplay()\n        +setIterationSpeed()\n    }\n\n    Grid \"1\" *-- \"many\" Cell : contains\n    GameOfLife \"1\" *-- \"1\" Grid : manages\n    GameOfLife \"1\" -- \"1\" GraphicalInterface : uses","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":true,"panZoom":true,"editorMode":"code","pan":{"x":81.60632095968323,"y":-4.78967969017385},"zoom":1.044980705507157},"time":1733124182640,"type":"auto","id":"80ac9905-c377-4666-9bcf-87299921b4de","name":"tinkling-midnight"},{"state":{"code":"classDiagram\n    class Grid {\n        -int rows\n        -int columns\n        -vector<Cell> cells\n        +Grid(int rows, int columns)\n        +loadFromFile(string filename)\n        +updateGrid()\n        +getCell(int x, int y) : Cell&\n        +displayConsole()\n        +displayGraphical()\n    }\n\n    class Cell {\n        -bool isAlive\n        -bool isObstacle\n        -int x\n        -int y\n        +Cell(bool state, int x, int y)\n        +getState() : bool\n        +setState(bool state)\n        +getNeighborsCount(Grid& grid) : int\n        +evolve(Grid& grid)\n    }\n\n    class GameOfLife {\n        -Grid gameGrid\n        -int maxIterations\n        -bool toroidalMode\n        +GameOfLife(string inputFile)\n        +runConsoleMode()\n        +runGraphicalMode()\n        +saveIteration(int iterationNumber)\n    }\n\n    class GraphicalInterface {\n        -sf::RenderWindow window\n        -Grid& gameGrid\n        +GraphicalInterface(Grid& grid)\n        +drawGrid()\n        +handleEvents()\n        +updateDisplay()\n        +setIterationSpeed()\n    }\n\n    Grid \"1\" *-- \"many\" Cell : contains\n    GameOfLife \"1\" *-- \"1\" Grid : manages\n    GameOfLife \"1\" -- \"1\" GraphicalInterface : uses","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":true,"panZoom":true,"editorMode":"code"},"time":1733123643262,"type":"auto","id":"50995cac-9f51-4d62-bb96-fd1f808ac9a2","name":"bulky-salesmen"},{"state":{"code":"classDiagram\n    class Grid {\n        -int rows\n        -int columns\n        -vector<Cell> cells\n        +Grid(int rows, int columns)\n        +loadFromFile(string filename)\n        +updateGrid()\n        +getCell(int x, int y) : Cell&\n        +displayConsole()\n        +displayGraphical()\n    }\n\n    class Cell {\n        -bool isAlive\n        -bool isObstacle\n        -int x\n        -int y\n        +Cell(bool state, int x, int y)\n        +getState() : bool\n        +setState(bool state)\n        +getNeighborsCount(Grid& grid) : int\n        +evolve(Grid& grid)\n    }\n\n    class GameOfLife {\n        -Grid gameGrid\n        -int maxIterations\n        -bool toroidalMode\n        +GameOfLife(string inputFile)\n        +runConsoleMode()\n        +runGraphicalMode()\n        +saveIteration(int iterationNumber)\n    }\n\n    class GraphicalInterface {\n        -sf::RenderWindow window\n        -Grid& gameGrid\n        +GraphicalInterface(Grid& grid)\n        +drawGrid()\n        +handleEvents()\n        +updateDisplay()\n        +setIterationSpeed()\n    }\n\n    Grid \"1\" *-- \"many\" Cell : contains\n    GameOfLife \"1\" *-- \"1\" Grid : manages\n    GameOfLife \"1\" -- \"1\" GraphicalInterface : uses","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":true,"updateDiagram":false,"panZoom":false,"editorMode":"code"},"time":1732781913684,"type":"auto","id":"59b4eb76-7ce6-492e-81ee-dce71429d558","name":"ambitious-night"},{"state":{"code":"classDiagram\n    class Cell {\n        - bool isAlive\n        - int x\n        - int y\n        + Cell(int x, int y, bool alive)\n        + bool isAlive()\n        + void setAlive(bool alive)\n        + int getX()\n        + int getY()\n    }\n\n    class Grid {\n        - Cell[][] cells\n        - int width\n        - int height\n        + Grid(int width, int height)\n        + void initializeRandomGrid()\n        + void updateGrid()\n        + Cell getCell(int x, int y)\n        - int countLiveNeighbors(int x, int y)\n        + void display()\n    }\n\n    class GameOfLife {\n        - Grid grid\n        + GameOfLife(int width, int height)\n        + void run()\n        + void nextGeneration()\n        + void printGrid()\n    }\n\n    Cell \"0..*\" -- \"1\" Grid : contains\n    GameOfLife \"1\" -- \"1\" Grid : manages","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":true,"updateDiagram":true,"panZoom":false,"editorMode":"code"},"time":1732780533684,"type":"auto","id":"5c69c1f8-cafe-4c68-83b7-4993fd8bfcf9","name":"greasy-window"},{"state":{"code":"---\ntitle: Infix fully parenthesized expression calculator\n---\nclassDiagram\n    class Token {\n        -type : TokenType \n        -value : string \n        +Token(type : TokenType , value : string)\n        +getValue() string \n        +getType() TokenType \n        +isType(TokenType type) bool \n        +isOperator() bool \n        +toString() string \n    }\n\n    class Lexer {\n        -readInteger(expr : string, num : string&) int \n        +vector<Token*> tokenize(string expr)\n    }\n\n    class Expression {\n        +interpret() void*\n        ~Expression() \n    }\n    \n    class OpenExpression {\n        +interpret() void \n    }\n    \n    class UnaryOp {\n        +compute(right : int) int*\n        +interpret() void\n    }\n\n    class MinusUnaryOp {\n        +compute(right : int) int\n    }\n\n    class PlusUnaryOp {\n        +compute(right : int) int \n    }\n\n    class BinaryOp {\n        +compute(left : int, right : int) int*\n        +interpret() void\n    }\n\n    class MinusBinaryOp {\n        +compute(left : int, right : int) int\n    }\n\n    class PlusBinaryOp {\n        +compute(left : int, right : int) int \n    }\n\n    class StarBinaryOp {\n        +compute(left : int, right : int) int\n    }\n\n    class DivBinaryOp {\n        +compute(left : int, right : int) int\n    }\n\n    class OperatorFactory {\n        +build(tokenType : TokenType, OperatorType operatorType) Expression *$\n    }\n\n    class Parser {\n        -operators : stack< Expression * > $\n        -operands : stack< int > $\n\n        -tokens : vector < Token * > \n        -idx : int \n        +Parser(tokens : vector< Token * >)\n        +next() :  (Token *)\n        +rewind() void \n        +reset() void \n        +parse() int \n        +consumeLeftParenthesis() void \n        +consumeRightParenthesis() void \n        +consumeBinop() bool \n        +consumeUnop() bool \n        +consumeLitteral() bool\n        +consumeBaseExpression() void \n        +consumeExpression() void \n        +solve() void \n    }\n\n    class TokenType {\n        <<enumeration>>\n        INTEGER\n        PLUSOPERATOR\n        MINUSOPERATOR\n        STAROPERATOR\n        SLASHOPERATOR\n        LPARENTHESIS\n        RPARENTHESIS\n    }\n\n    class OperatorType {\n        <<enumeration>>\n        UNARY\n        BINARY\n        TERNARY\n    }\n\n    class Client {\n        main() int $\n    }\n\n\t<<Abstract>> BinaryOp\n    <<Abstract>> UnaryOp\n    <<Abstract>> Expression\n    Lexer ..> Token : << instantiates >>\n    Parser o-- Token\n    Parser *-- Expression\n    Parser ..> OperatorFactory : << uses >>\n    OperatorFactory --> Expression : << instantiates >>\n    Expression <|-- UnaryOp\n    Expression <|-- BinaryOp\n    Expression <|-- OpenExpression\n    Expression <|-- UnaryOp\n    Expression <|-- BinaryOp\n    UnaryOp <|-- MinusUnaryOp\n    UnaryOp <|-- PlusUnaryOp\n    BinaryOp <|-- MinusBinaryOp\n    BinaryOp <|-- PlusBinaryOp\n    BinaryOp <|-- StarBinaryOp\n    BinaryOp <|-- DivBinaryOp\n    Token *-- TokenType\n    OperatorFactory ..> OperatorType : << uses >>\n    OperatorFactory ..> PlusUnaryOp : << instantiates >>\n    OperatorFactory ..> MinusUnaryOp : << instantiates >>\n    OperatorFactory ..> PlusBinaryOp : << instantiates >>\n    OperatorFactory ..> MinusBinaryOp : << instantiates >>\n    OperatorFactory ..> StarBinaryOp : << instantiates >>\n    OperatorFactory ..> SlashBinaryOp : << instantiates >>\n    OperatorFactory ..> DivBinaryOp : << instantiates >>\n\n    Client ..> Lexer : << uses >>\n    Client ..> Parser : << uses >>\n    Client ..> Token : << uses >>\n","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":true,"updateDiagram":true,"panZoom":false,"editorMode":"code"},"time":1732695917969,"type":"auto","id":"1676ca50-c713-449b-866c-c0fb8ad446de","name":"raspy-helmet"},{"state":{"code":"classDiagram\n    class Cellule {\n        - etatActuel: bool\n        - etatProchain: bool\n        + calculerProchainEtat(nbVoisinsVivants: int): void\n        + mettreAJourEtat(): void\n        + estObstacle: bool\n    }\n\n    class Grille {\n        - largeur: int\n        - hauteur: int\n        - cellules: Cellule[][]\n        + initialiserGrille(fichier: string): void\n        + calculerProchainEtat(): void\n        + mettreAJourGrille(): void\n        + compterVoisinsVivants(x: int, y: int): int\n        + modeTorique: bool\n    }\n\n    class JeuDeLaVie {\n        - grille: Grille\n        - generation: int\n        - modeGraphique: bool\n        - delaiIteration: int\n        + demarrer(): void\n        + afficherGrille(): void\n        + pause(): void\n        + chargerMotif(x: int, y: int, motif: string): void\n    }\n\n    class InterfaceGraphique {\n        - fenetre: SFML::RenderWindow\n        + afficherGrille(grille: Grille): void\n        + gererEvenements(): void\n    }\n\n    JeuDeLaVie --> Grille : \"manipule\"\n    Grille --> Cellule : \"contient des\"\n    JeuDeLaVie --> InterfaceGraphique : \"interagit avec\"\n","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false,"editorMode":"code"},"time":1732627648947,"type":"auto","id":"68fcfc7e-5fd9-48d7-992e-2d2701e0fcf9","name":"brave-apple"},{"state":{"code":"classDiagram\n    class Cellule {\n        - etatActuel: bool\n        - etatProchain: bool\n        + calculerProchainEtat(nbVoisinsVivants: int): void\n        + mettreAJourEtat(): void\n    }\n    \n    class Grille {\n        - largeur: int\n        - hauteur: int\n        - cellules: Cellule[][]\n        + initialiserGrille(): void\n        + calculerProchainEtat(): void\n        + mettreAJourGrille(): void\n        + compterVoisinsVivants(x: int, y: int): int\n    }\n    \n    class JeuDeLaVie {\n        - grille: Grille\n        - generation: int\n        + demarrer(): void\n        + afficherGrille(): void\n        + pause(): void\n    }\n\n    Grille --> Cellule : \"contient des\"\n    JeuDeLaVie --> Grille : \"manipule\"\n","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false,"editorMode":"code"},"time":1732627588946,"type":"auto","id":"dce1d49a-b4da-420d-b7c9-e5db910f22af","name":"billions-tiger"},{"state":{"code":"classDiagram\n    Polynomial \"\" o-- \"1..*\" Monomial\n    Polynomial --|> Expression\n    Monomial --|> Expression\n    \n    class Polynomial {\n    }\n    class Monomial {\n    }\n    class Expression {\n    }\n    ","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":true,"panZoom":false,"editorMode":"code"},"time":1732611494758,"type":"auto","id":"5e01c65e-326a-47c4-8461-bc183412f190","name":"shaggy-argument"},{"state":{"code":"classDiagram\n    namespace Math {\n        class Monomial {\n            - coefficient : double\n            - variables : map<string, int>\n            + Monomial(double coef, map<string, int> vars)\n            + evaluate(map<string, double> variableValues) : double\n            + getCoefficient() : double\n        }\n\n        class Polynomial {\n            - terms : vector<Monomial>\n            + Polynomial()\n            + addMonomial(const Monomial& monomial) : void\n            + evaluate(map<string, double> variableValues) : double\n            + derivative(string variable) : Polynomial\n        }\n    }\n\n    Math.Polynomial \"1\" *-- \"0..*\" Math.Monomial : contains","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false,"editorMode":"code"},"time":1732610968415,"type":"auto","id":"8fb9a6c8-eb02-4811-a36a-32dee1291269","name":"bewildered-apple"},{"state":{"code":"classDiagram\n    Polynomial \"\" o-- \"1..*\" Monomial\n    \n    class Polynomial {\n        \n    }\n    class Monomial {\n        \n    }\n    ","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false,"editorMode":"code"},"time":1732610848413,"type":"auto","id":"59f021c5-5d8c-42ab-9f90-ac619bf7fda9","name":"noisy-ice"},{"state":{"code":"classDiagram\n    Polynomial \"\" o-- \"1..*\" Monomial\n    Polynomial --|> Expression\n    Monomial --|> Expression\n    \n    class Polynomial {\n    }\n    class Monomial {\n    }\n    class Expression {\n    }\n    ","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false,"editorMode":"code"},"time":1732608503846,"type":"auto","id":"1b66726a-31cc-4a7a-a3e1-afc587565652","name":"sparse-byte"},{"state":{"code":"classDiagram\n    Polynomial \"\" o-- \"1..*\" Monomial\n    Polynomial --|> Expression\n    Monomial --|> Expression\n    \n    class Polynomial {\n    }\n    class Monomial {\n    }\n    class Expression {\n    }\n    ","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":true,"panZoom":false,"editorMode":"code"},"time":1732608143942,"type":"auto","id":"81dc7af3-6860-49ad-9bce-05a91b97e081","name":"delightful-garage"},{"state":{"code":"classDiagram\n    Polynomial \"\" o-- \"\" Monomial\n    Polynomial <|-- Monomial\n    \n    class Polynomial {\n        \n        \n    }\n    class Monomial {\n        \n    }\n    ","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false,"editorMode":"code"},"time":1732283798455,"type":"auto","id":"cdbfc076-3d1a-4568-b382-119ef7df0968","name":"harsh-rose"},{"state":{"code":"classDiagram\n    Polynomial \"\" o-- \"1..*\" Monomial\n    \n    class Polynomial {\n        \n    }\n    class Monomial {\n        \n    }\n    ","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false,"editorMode":"code"},"time":1732283679463,"type":"auto","id":"950ea74b-d1f2-4abd-b545-3bd8af1dcd7d","name":"bulky-jelly"},{"state":{"code":"classDiagram\n    Polynomial \"\" o-- \"1..*\" Monomial\n    \n    class Polynomial {\n        \n    }\n    class Monomial {\n        \n    }\n    ","mermaid":"{\n  \"theme\": \"dark\",\n  \"mirrorActors\": false\n}","autoSync":true,"rough":false,"updateDiagram":true,"panZoom":false,"editorMode":"code"},"time":1732282779460,"type":"auto","id":"09ba8b60-97f0-4da6-b387-1ad53fe95941","name":"fat-ability"}]